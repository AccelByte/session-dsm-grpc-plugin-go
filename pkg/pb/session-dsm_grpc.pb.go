// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: session-dsm.proto

package sessiondsm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionDsmClient is the client API for SessionDsm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionDsmClient interface {
	CreateGameSession(ctx context.Context, in *RequestCreateGameSession, opts ...grpc.CallOption) (*ResponseCreateGameSession, error)
	TerminateGameSession(ctx context.Context, in *RequestTerminateGameSession, opts ...grpc.CallOption) (*ResponseTerminateGameSession, error)
}

type sessionDsmClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionDsmClient(cc grpc.ClientConnInterface) SessionDsmClient {
	return &sessionDsmClient{cc}
}

func (c *sessionDsmClient) CreateGameSession(ctx context.Context, in *RequestCreateGameSession, opts ...grpc.CallOption) (*ResponseCreateGameSession, error) {
	out := new(ResponseCreateGameSession)
	err := c.cc.Invoke(ctx, "/accelbyte.session.sessiondsm.SessionDsm/CreateGameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionDsmClient) TerminateGameSession(ctx context.Context, in *RequestTerminateGameSession, opts ...grpc.CallOption) (*ResponseTerminateGameSession, error) {
	out := new(ResponseTerminateGameSession)
	err := c.cc.Invoke(ctx, "/accelbyte.session.sessiondsm.SessionDsm/TerminateGameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionDsmServer is the server API for SessionDsm service.
// All implementations must embed UnimplementedSessionDsmServer
// for forward compatibility
type SessionDsmServer interface {
	CreateGameSession(context.Context, *RequestCreateGameSession) (*ResponseCreateGameSession, error)
	TerminateGameSession(context.Context, *RequestTerminateGameSession) (*ResponseTerminateGameSession, error)
	mustEmbedUnimplementedSessionDsmServer()
}

// UnimplementedSessionDsmServer must be embedded to have forward compatible implementations.
type UnimplementedSessionDsmServer struct {
}

func (UnimplementedSessionDsmServer) CreateGameSession(context.Context, *RequestCreateGameSession) (*ResponseCreateGameSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameSession not implemented")
}
func (UnimplementedSessionDsmServer) TerminateGameSession(context.Context, *RequestTerminateGameSession) (*ResponseTerminateGameSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateGameSession not implemented")
}
func (UnimplementedSessionDsmServer) mustEmbedUnimplementedSessionDsmServer() {}

// UnsafeSessionDsmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionDsmServer will
// result in compilation errors.
type UnsafeSessionDsmServer interface {
	mustEmbedUnimplementedSessionDsmServer()
}

func RegisterSessionDsmServer(s grpc.ServiceRegistrar, srv SessionDsmServer) {
	s.RegisterService(&SessionDsm_ServiceDesc, srv)
}

func _SessionDsm_CreateGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateGameSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionDsmServer).CreateGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.session.sessiondsm.SessionDsm/CreateGameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionDsmServer).CreateGameSession(ctx, req.(*RequestCreateGameSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionDsm_TerminateGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerminateGameSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionDsmServer).TerminateGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.session.sessiondsm.SessionDsm/TerminateGameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionDsmServer).TerminateGameSession(ctx, req.(*RequestTerminateGameSession))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionDsm_ServiceDesc is the grpc.ServiceDesc for SessionDsm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionDsm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.session.sessiondsm.SessionDsm",
	HandlerType: (*SessionDsmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGameSession",
			Handler:    _SessionDsm_CreateGameSession_Handler,
		},
		{
			MethodName: "TerminateGameSession",
			Handler:    _SessionDsm_TerminateGameSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session-dsm.proto",
}
